import React, { useState } from 'react';
import { Award, Heart, TrendingUp, Users, Coffee, Gift } from 'lucide-react';

export default function SatisfactionQuiz() {
  const [step, setStep] = useState(0);
  const [answers, setAnswers] = useState({});
  const [showResults, setShowResults] = useState(false);

  const questions = [
    {
      id: 1,
      type: 'checkbox',
      question: '–ß—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã?',
      icon: Heart,
      options: [
        '–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞',
        '–ù–∞–ª–∏—á–∏–µ —Å–ª–∞–¥–æ—Å—Ç–µ–π, —Å–∏—Ä–æ–ø–æ–≤',
        '–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ñ–∏—Å–∞ (—Ä–µ–º–æ–Ω—Ç, —Ü–≤–µ—Ç—ã, –º–µ–±–µ–ª—å)',
        '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (–∏–≥—Ä—ã, –∞–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å, –º–∞—Å—Å–∞–∂–µ—Ä)',
        '–≠–∫—Å–∫—É—Ä—Å–∏–∏',
        '–í—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
        '–ê—É–¥–∏–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ',
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –æ—Ç–¥—ã—Ö'
      ]
    },
    {
      id: 2,
      type: 'text',
      question: '–ß–µ–º –±—ã –≤—ã –¥–æ–ø–æ–ª–Ω–∏–ª–∏ –∫—É—Ö–æ–Ω–Ω—É—é –∑–æ–Ω—É?',
      icon: Coffee,
      placeholder: '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è...'
    },
    {
      id: 3,
      type: 'checkbox',
      question: '–ß—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –≤–∞—à—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å?',
      icon: TrendingUp,
      options: [
        '–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (—à–∫–∞—Ñ—ã, –ø–æ–ª–∫–∏)',
        '–£–¥–æ–±–Ω—ã–π —Å—Ç—É–ª',
        '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞',
        '–û—Å–≤–µ—â–µ–Ω–∏–µ',
        '–ß–∏—Å—Ç–æ—Ç–∞ –∏ –ø–æ—Ä—è–¥–æ–∫',
        '–°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞',
        '–†–∞–±–æ—á–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
      ]
    },
    {
      id: 4,
      type: 'slider',
      question: '–û—Ü–µ–Ω–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (0-100%)',
      icon: Users,
      statements: [
        '–Ø –∑–Ω–∞—é —Ü–µ–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏',
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞',
        '–Ø —á–µ—Ç–∫–æ –ø–æ–Ω–∏–º–∞—é —Å–≤–æ–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏',
        '–ü–µ—Ä–µ–¥–æ –º–Ω–æ–π —Å—Ç–∞–≤—è—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏',
        '–Ø —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, —Å –º–æ–∏–º –º–Ω–µ–Ω–∏–µ–º —Å—á–∏—Ç–∞—é—Ç—Å—è'
      ]
    },
    {
      id: 5,
      type: 'rating',
      question: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å? (1-10)',
      icon: Award,
      items: [
        '–ó–Ω–∞—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–ø–∞–Ω–∏–∏',
        '–ü–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–º',
        '–û—Ç–∫—Ä—ã—Ç–æ –æ–±—Å—É–∂–¥–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º',
        '–í–Ω–æ—Å–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è—Ö'
      ]
    },
    {
      id: 6,
      type: 'text',
      question: '–ù–∞ —á–µ–º –æ—Å–Ω–æ–≤—ã–≤–∞—é—Ç—Å—è —É—Å–ø–µ—Ö–∏ –∫–æ–º–ø–∞–Ω–∏–∏?',
      icon: Gift,
      placeholder: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º...'
    }
  ];

  const handleAnswer = (questionId, value) => {
    setAnswers({ ...answers, [questionId]: value });
  };

  const calculateScore = () => {
    let totalScore = 0;
    let maxScore = 0;

    Object.entries(answers).forEach(([qId, answer]) => {
      const q = questions.find(qu => qu.id === parseInt(qId));
      
      if (q.type === 'checkbox') {
        totalScore += Array.isArray(answer) ? answer.length * 10 : 0;
        maxScore += q.options.length * 10;
      } else if (q.type === 'slider') {
        const avg = answer ? Object.values(answer).reduce((a, b) => a + b, 0) / Object.values(answer).length : 0;
        totalScore += avg;
        maxScore += 100;
      } else if (q.type === 'rating') {
        const avg = answer ? Object.values(answer).reduce((a, b) => a + b, 0) / Object.values(answer).length : 0;
        totalScore += avg * 10;
        maxScore += 100;
      } else if (q.type === 'text' && answer && answer.trim()) {
        totalScore += 50;
        maxScore += 50;
      }
    });

    return maxScore > 0 ? Math.round((totalScore / maxScore) * 100) : 0;
  };

  const getResultMessage = (score) => {
    if (score >= 80) return {
      title: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏! üåü',
      message: '–í—ã –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É –≤ –∫–æ–º–ø–∞–Ω–∏–∏. –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ –¥–ª—è –Ω–∞—Å!',
      color: 'from-green-500 to-emerald-600'
    };
    if (score >= 60) return {
      title: '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
      message: '–ï—Å—Ç—å –∞—Å–ø–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!',
      color: 'from-blue-500 to-cyan-600'
    };
    return {
      title: '–ï—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∞—Ç—å',
      message: '–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å!',
      color: 'from-orange-500 to-amber-600'
    };
  };

  const nextStep = () => {
    if (step < questions.length - 1) {
      setStep(step + 1);
    } else {
      setShowResults(true);
    }
  };

  const prevStep = () => {
    if (step > 0) setStep(step - 1);
  };

  if (showResults) {
    const score = calculateScore();
    const result = getResultMessage(score);
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-500 to-orange-500 p-4 flex items-center justify-center">
        <div className="max-w-2xl w-full bg-white rounded-3xl shadow-2xl p-8 transform transition-all">
          <div className="text-center">
            <div className={`inline-block p-6 rounded-full bg-gradient-to-r ${result.color} mb-6`}>
              <Award className="w-16 h-16 text-white" />
            </div>
            
            <h2 className="text-3xl font-bold mb-4 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              {result.title}
            </h2>
            
            <div className="mb-6">
              <div className="text-6xl font-bold text-gray-800 mb-2">{score}%</div>
              <p className="text-gray-600 text-lg">{result.message}</p>
            </div>

            <div className="bg-gradient-to-r from-yellow-100 to-orange-100 border-2 border-yellow-400 rounded-2xl p-6 mb-6">
              <Gift className="w-12 h-12 text-yellow-600 mx-auto mb-3" />
              <h3 className="text-xl font-bold text-gray-800 mb-2">üéÅ –í–∞—à –±–æ–Ω—É—Å!</h3>
              <p className="text-gray-700 mb-3">
                –û–¥–∏–Ω —á–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –≤ —è–Ω–≤–∞—Ä–µ
              </p>
              <div className="bg-white rounded-lg p-4 border-2 border-dashed border-yellow-400">
                <p className="text-sm text-gray-600 mb-2">–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:</p>
                <p className="text-2xl font-bold text-transparent bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text">
                  –ó–ê–°–õ–£–ñ–ò–õ
                </p>
              </div>
              <p className="text-xs text-gray-500 mt-3">
                –ù–∞–∑–æ–≤–∏—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞
              </p>
            </div>

            <button
              onClick={() => {
                setStep(0);
                setAnswers({});
                setShowResults(false);
              }}
              className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-8 py-3 rounded-full font-semibold hover:shadow-lg transition-all"
            >
              –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
            </button>
          </div>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[step];
  const Icon = currentQuestion.icon;

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-500 to-orange-500 p-4">
      <div className="max-w-3xl mx-auto pt-8">
        <div className="bg-white rounded-3xl shadow-2xl overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-purple-600 to-pink-600 p-6 text-white">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <Icon className="w-8 h-8" />
                <h1 className="text-2xl font-bold">–û—Ü–µ–Ω–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏</h1>
              </div>
              <div className="text-sm bg-white/20 px-4 py-2 rounded-full">
                {step + 1} / {questions.length}
              </div>
            </div>
            <div className="w-full bg-white/30 rounded-full h-2">
              <div 
                className="bg-white h-2 rounded-full transition-all duration-500"
                style={{ width: `${((step + 1) / questions.length) * 100}%` }}
              />
            </div>
          </div>

          {/* Question Content */}
          <div className="p-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-6">
              {currentQuestion.question}
            </h2>

            {currentQuestion.type === 'checkbox' && (
              <div className="space-y-3">
                {currentQuestion.options.map((option, idx) => (
                  <label key={idx} className="flex items-center p-4 bg-gray-50 rounded-xl hover:bg-purple-50 cursor-pointer transition-all border-2 border-transparent hover:border-purple-300">
                    <input
                      type="checkbox"
                      checked={answers[currentQuestion.id]?.includes(option) || false}
                      onChange={(e) => {
                        const current = answers[currentQuestion.id] || [];
                        const updated = e.target.checked
                          ? [...current, option]
                          : current.filter(o => o !== option);
                        handleAnswer(currentQuestion.id, updated);
                      }}
                      className="w-5 h-5 text-purple-600 rounded"
                    />
                    <span className="ml-3 text-gray-700">{option}</span>
                  </label>
                ))}
              </div>
            )}

            {currentQuestion.type === 'text' && (
              <textarea
                value={answers[currentQuestion.id] || ''}
                onChange={(e) => handleAnswer(currentQuestion.id, e.target.value)}
                placeholder={currentQuestion.placeholder}
                className="w-full p-4 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-all min-h-32"
              />
            )}

            {currentQuestion.type === 'slider' && (
              <div className="space-y-6">
                {currentQuestion.statements.map((statement, idx) => (
                  <div key={idx}>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      {statement}
                    </label>
                    <div className="flex items-center gap-4">
                      <span className="text-sm text-gray-500">0%</span>
                      <input
                        type="range"
                        min="0"
                        max="100"
                        value={answers[currentQuestion.id]?.[idx] || 50}
                        onChange={(e) => {
                          const current = answers[currentQuestion.id] || {};
                          handleAnswer(currentQuestion.id, { ...current, [idx]: parseInt(e.target.value) });
                        }}
                        className="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-purple-600"
                      />
                      <span className="text-sm font-bold text-purple-600 w-12">
                        {answers[currentQuestion.id]?.[idx] || 50}%
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {currentQuestion.type === 'rating' && (
              <div className="space-y-6">
                {currentQuestion.items.map((item, idx) => (
                  <div key={idx}>
                    <label className="block text-sm font-medium text-gray-700 mb-3">
                      {item}
                    </label>
                    <div className="flex gap-2">
                      {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => (
                        <button
                          key={num}
                          onClick={() => {
                            const current = answers[currentQuestion.id] || {};
                            handleAnswer(currentQuestion.id, { ...current, [idx]: num });
                          }}
                          className={`w-12 h-12 rounded-lg font-bold transition-all ${
                            answers[currentQuestion.id]?.[idx] === num
                              ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-110 shadow-lg'
                              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                          }`}
                        >
                          {num}
                        </button>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Navigation */}
          <div className="p-6 bg-gray-50 flex justify-between">
            <button
              onClick={prevStep}
              disabled={step === 0}
              className="px-6 py-3 rounded-full font-semibold disabled:opacity-50 disabled:cursor-not-allowed bg-gray-200 text-gray-700 hover:bg-gray-300 transition-all"
            >
              –ù–∞–∑–∞–¥
            </button>
            <button
              onClick={nextStep}
              className="px-8 py-3 rounded-full font-semibold bg-gradient-to-r from-purple-600 to-pink-600 text-white hover:shadow-lg transition-all"
            >
              {step === questions.length - 1 ? '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç' : '–î–∞–ª–µ–µ'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
